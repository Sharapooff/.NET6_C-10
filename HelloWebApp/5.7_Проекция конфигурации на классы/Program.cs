var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

builder.Configuration.AddJsonFile("person.json");
var tom = new Person();
app.Configuration.Bind(tom);    // связываем конфигурацию с объектом tom, ключевой момент заключается в применении метода Bind
// В качестве альтернативы методу Bind мы могли бы использовать метод Get<T>(), который возвращает объект созданного класса:
// Person tom = app.Configuration.Get<Person>();
// Подобным образом можно выполнять привязку при получении конфигурации через механизм Dependency Injection:
// app.Map("/", (IConfiguration appConfig) =>
// {
//     var tom = appConfig.Get<Person>();  // связываем конфигурацию с объектом tom
//     return $"{tom.Name} - {tom.Age}";
// });

app.Run(async (context) => await context.Response.WriteAsync($"{tom.Name} - {tom.Age}"));

app.Run();


//Фреймворк ASP.NET Core позволяет проецировать конфигурационные настройки на классы C#.
// Например, определим в проекте новый файл person.json, который будет хранить данные пользователя и свяжем конфигурацию из файла person.json с объектом класса Person:
public class Person
{
    public string Name { get; set; } = "";
    public int Age { get; set; } = 0;
}

//Привязка сложных объектов
// Рассмотрим привязку более сложных по структуре данных. Определим следующий файл person_new.json
// Для представления этих данных в коде C# определим следующие классы:
public class Person_new
{
    public string Name { get; set; } = "";
    public int Age { get; set; }
    public List<string> Languages { get; set; } = new();
    public Company? Company { get; set; }
}
public class Company
{
    public string Title { get; set; } = "";
    public string Country { get; set; } = "";
}

// Теперь выполним в приложении привязку из конфигурации json в объекты классов C#:
//var builder = WebApplication.CreateBuilder();
//var app = builder.Build();

//builder.Configuration.AddJsonFile("person_new.json");

//var tom = new Person_new();
//app.Configuration.Bind(tom);

//app.Run(async (context) =>
//{
//    context.Response.ContentType = "text/html; charset=utf-8";
//    string name = $"<p>Name: {tom.Name}</p>";
//    string age = $"<p>Age: {tom.Age}</p>";
//    string company = $"<p>Company: {tom.Company?.Title}</p>";
//    string langs = "<p>Languages:</p><ul>";
//    foreach (var lang in tom.Languages)
//    {
//        langs += $"<li><p>{lang}</p></li>";
//    }
//    langs += "</ul>";

//    await context.Response.WriteAsync($"{name}{age}{company}{langs}");
//});
//app.Run();

//Привязка конфигурации из xml
// Возьмем выше определенные классы Person_new и Company. И добавим в проект файл person.xml, который будет содержать аналогичные данные/
// Обратите внимание на установку в файле xml массивов - они имеют атрибут name, который определяет условный индекс.
// Применим конфигурацию из выше определенного файла xml в приложении:
//var builder = WebApplication.CreateBuilder();
//var app = builder.Build();

//builder.Configuration.AddXmlFile("person.xml");

//var tom = new Person_new();
//app.Configuration.Bind(tom);

//app.Run(async (context) =>
//{
//    context.Response.ContentType = "text/html; charset=utf-8";
//    string name = $"<p>Name: {tom.Name}</p>";
//    string age = $"<p>Age: {tom.Age}</p>";
//    string company = $"<p>Company: {tom.Company?.Title}</p>";
//    string langs = "<p>Languages:</p><ul>";
//    foreach (var lang in tom.Languages)
//    {
//        langs += $"<li><p>{lang}</p></li>";
//    }
//    langs += "</ul>";

//    await context.Response.WriteAsync($"{name}{age}{company}{langs}");
//});
//app.Run();
// Меняется только подключение файла с json на xml, а весь остальной код остается прежним.

//Привязка секций конфигурации
// В примерах выше выполнялась привязка корневого объекта конфигурации, однако также можно осуществлять привязку отдельных секций. Например, выше в файле json и xml
// была определена секция company, которая хранит компанию пользователя. Выполним привязку отдельно этой секции к объекту класса Company:

//Привязка секций конфигурации
// В примерах выше выполнялась привязка корневого объекта конфигурации, однако также можно осуществлять привязку отдельных секций. Например, выше в файле json и xml
// была определена секция company, которая хранит компанию пользователя. Выполним привязку отдельно этой секции к объекту класса Company:
//var builder = WebApplication.CreateBuilder();
//var app = builder.Build();

//builder.Configuration.AddJsonFile("person.json");

//Company company = app.Configuration.GetSection("company").Get<Company>();

//app.Run(async (context) =>
//{
//    await context.Response.WriteAsync($"{company.Title} - {company.Country}");
//});
//app.Run();
// С помощью метода GetSection() получаем нужную нам секцию конфигурации и затем также можно вызвать методы Bind или Get и выполнить привязку.