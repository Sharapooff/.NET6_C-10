var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

//app.MapGet("/", () => "Hello World!");
//фреймворк ASP.NET Core по умолчанию предоставляет такой middleware как WelcomePageMiddleware, который отправляет клиенту некоторую стандартную веб-страницу.
//Для подключения этого компонента в конвейер запроса применяется метод расширения UseWelcomePage():
app.UseWelcomePage();   // подключение WelcomePageMiddleware

app.Run();


//Одна из основных задач приложения - это обработка входящих запросов. Обработка запроса в ASP.NET Core устроена по принципу конвейера,
//который состоит из компонентов. Подобные компоненты еще называются middleware.

//Данные запроса получает первый компонент в конвейере, после обработки запроса компонент middleware он может закончить обработку запроса, а может 
//передать данные запроса для обработки далее по конвейеру - следующему в конвейере компоненту и так далее.
//После обработки запроса последним компонентом, данные запроса возвращаются к предыдущему компоненту.

//Компоненты middleware встраиваются с помощью методов расширений Run, Map и Use интерфейса IApplicationBuilder.
//Класс WebApplication реализует данный интерфейс и поэтому позволяет добавлять компоненты middleware с помощью данных методов.

//Каждый компонент middleware может быть определен как метод (встроенный inline компонент), либо может быть вынесен в отдельный класс.
//При получении запроса сервер формирует на его основе объект HttpContext, которые содержит всю необходимую информацию о запросе.
//Эта информация посредством объекта HttpContext передается всем компонентам middleware в приложении. Используя ее, мы можем в компоненте middleware получить если не все,
//то большую часть необходимых данных о запросе и отправить обратно клиенту некоторый ответ.

//Для встраивания этих компонентов в конвейер обработки запроса для интерфейса IApplicationBuilder определены методы расширения типа UseXXX.

//Встроенные компоненты middleware
//Стоит отметить, что ASP.NET Core уже по умолчанию предоставляет ряд встроенных компонентов middleware для часто встречающихся задач:
//Authentication: предоставляет поддержку аутентификации
//Authorization: предоставляет поддержку авторизации
//Cookie Policy: отслеживает согласие пользователя на хранение связанной с ним информации в куках
//CORS: обеспечивает поддержку кроссдоменных запросов
//DeveloperExceptionPage: генерирует веб-страницу с информацией об ошибке при работе в режиме разработки
//Diagnostics: набор middleware, который предоставляет страницы статусных кодов, функционал обработки исключений, страницу исключений разработчика
//Forwarded Headers: перенаправляет заголовки запроса
//Health Check: проверяет работоспособность приложения asp.net core
//Header Propagation: обеспечивает передачу заголовков из HTTP-запроса
//HTTP Logging: логгирует информацию о входящих запросах и генерируемых ответах
//HTTP Method Override: позволяет входящему POST-запросу переопределить метод
//HTTPS Redirection: перенаправляет все запросы HTTP на HTTPS
//HTTP Strict Transport Security (HSTS): для улучшения безопасности приложения добавляет специальный заголовок ответа
//MVC: обеспечивает функционал фреймворка MVC
//OWIN: обеспечивает взаимодействие с приложениями, серверами и компонентами, построенными на основе спецификации OWIN
//Request Localization: обеспечивает поддержку локализации
//Response Caching: позволяет кэшировать результаты запросов
//Response Compression: обеспечивает сжатие ответа клиенту
//URL Rewrite: предоставляет функциональность URL Rewriting
//Endpoint Routing: предоставляет механизм маршрутизации
//Session: предоставляет поддержку сессий
//SPA: обрабатывает все запросы, возвращая страницу по умолчанию для SPA-приложения (одностраничного приложения)
//Static Files: предоставляет поддержку обработки статических файлов
//WebSockets: добавляет поддержку протокола WebSockets
//W3CLogging: генерирует логи доступа в соответствии с форматом W3C Extended Log File Format
